package GUI;

import com.maze.BFSMazeSolver;
import com.maze.BotMovement;
import com.maze.BotMovement.BOT_DIRECTION;
import com.maze.BotMovement.BOT_ACTIONS;
import com.maze.Coordinate;
import com.maze.Maze;
import com.maze.MazeMovementSolver;
import controller.BotCalls;
import controller.ImageUtils;
import static controller.ImageUtils.getStandardDump;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author uidk2372
 */
public class BotController extends javax.swing.JFrame {

    private static String imgPath = "original_pic.jpg";
    private static Image capturedImage;
    private static Size finalSize = new Size(46,35);
    private static double [] greenData = new double[]{150};
    private static double [] redData = new double[]{75};
    private Mat originalImage;
    private Mat MazeMat = null;
    
    private final String BOT_ADDRESS ="10.0.1.1";
    private final int BOT_PORT = 8888;
    
    private static BOT_DIRECTION lastDirection = BOT_DIRECTION.up;
    
    /**
     * Creates new form BotController
     */
    public BotController() {
        initComponents();
        repaintOriginalPicture();
        
        try {
            ImageUtils.InitializeUrl();
        } catch (MalformedURLException ex) {
            Logger.getLogger(BotController.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(),"Application Error",JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        originalPanel = new javax.swing.JPanel();
        originalImageLabel = new javax.swing.JLabel();
        configurationPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        startXY = new javax.swing.JTextField();
        pictureSize = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        hsvMinBlueTextBox = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        hsvMaxBlueTextBox = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        hsvMinRedTextBox = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        hsvMaxRedTextBox = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        hsvMaxGreenTextBox = new javax.swing.JTextField();
        hsvMinGreenTextBox = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        hMinSlider = new javax.swing.JSlider();
        hMaxSlider = new javax.swing.JSlider();
        sMaxSlider = new javax.swing.JSlider();
        vMinSlider = new javax.swing.JSlider();
        vMaxSlider = new javax.swing.JSlider();
        sMinSlider = new javax.swing.JSlider();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        minValueTextField = new javax.swing.JTextField();
        maxValueTextField = new javax.swing.JTextField();
        outputPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        mazeImageLabel = new javax.swing.JLabel();
        outputImageLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        snapshotButton = new javax.swing.JButton();
        startSolvingButton = new javax.swing.JButton();
        updatePictureSettingsButton = new javax.swing.JButton();
        initialSnapshotButton = new javax.swing.JButton();
        solveAllButton = new javax.swing.JButton();
        sendMovementButton = new javax.swing.JButton();
        useNewImage = new javax.swing.JCheckBox();
        resetPosition = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bot Controller");
        setBackground(new java.awt.Color(204, 204, 204));
        setName("Bot Controller"); // NOI18N
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Bot Controller V1.0");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Input");

        originalPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        originalImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/original_pic.jpg"))); // NOI18N
        originalImageLabel.setToolTipText("");
        originalImageLabel.setMaximumSize(new java.awt.Dimension(400, 300));
        originalImageLabel.setMinimumSize(new java.awt.Dimension(400, 300));
        originalImageLabel.setName(""); // NOI18N
        originalImageLabel.setPreferredSize(new java.awt.Dimension(400, 300));

        configurationPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setText("Picture Size");

        jLabel7.setText("Start X,Y");

        startXY.setText("420,40");
        startXY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startXYActionPerformed(evt);
            }
        });

        pictureSize.setText("1185,880");
        pictureSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pictureSizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startXY)
                    .addComponent(pictureSize))
                .addGap(120, 120, 120))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startXY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pictureSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(240, Short.MAX_VALUE))
        );

        configurationPane.addTab("Size", jPanel1);

        hsvMinBlueTextBox.setText("66,153,83");
        hsvMinBlueTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hsvMinBlueTextBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("HSVmin Blue");

        jLabel5.setText("HSVmax Blue");

        hsvMaxBlueTextBox.setText("117,255,215");
        hsvMaxBlueTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hsvMaxBlueTextBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(hsvMinBlueTextBox)
                    .addComponent(hsvMaxBlueTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(126, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hsvMinBlueTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(hsvMaxBlueTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(240, Short.MAX_VALUE))
        );

        configurationPane.addTab("Blue Parameters", jPanel2);

        jLabel8.setText("HSVmin Red");

        hsvMinRedTextBox.setText("124,122,129");
        hsvMinRedTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hsvMinRedTextBoxActionPerformed(evt);
            }
        });

        jLabel9.setText("HSVmax Red");

        hsvMaxRedTextBox.setText("180,216,243");
        hsvMaxRedTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hsvMaxRedTextBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(hsvMinRedTextBox)
                    .addComponent(hsvMaxRedTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(129, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hsvMinRedTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(hsvMaxRedTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(240, Short.MAX_VALUE))
        );

        configurationPane.addTab("Red Parameters", jPanel3);

        hsvMaxGreenTextBox.setText("94,255,185");
        hsvMaxGreenTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hsvMaxGreenTextBoxActionPerformed(evt);
            }
        });

        hsvMinGreenTextBox.setText("49,41,168");
        hsvMinGreenTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hsvMinGreenTextBoxActionPerformed(evt);
            }
        });

        jLabel10.setText("HSVmin Green");

        jLabel11.setText("HSVmax Green");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(hsvMinGreenTextBox)
                    .addComponent(hsvMaxGreenTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hsvMinGreenTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(hsvMaxGreenTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(240, Short.MAX_VALUE))
        );

        configurationPane.addTab("Green Parameters", jPanel4);

        hMinSlider.setMaximum(180);
        hMinSlider.setValue(0);
        hMinSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hMinSliderStateChanged(evt);
            }
        });
        hMinSlider.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                hMinSliderCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        hMaxSlider.setMaximum(180);
        hMaxSlider.setValue(180);
        hMaxSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hMaxSliderStateChanged(evt);
            }
        });
        hMaxSlider.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                hMaxSliderCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        sMaxSlider.setMaximum(255);
        sMaxSlider.setValue(255);
        sMaxSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sMaxSliderStateChanged(evt);
            }
        });
        sMaxSlider.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                sMaxSliderCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        vMinSlider.setMaximum(255);
        vMinSlider.setValue(0);
        vMinSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                vMinSliderStateChanged(evt);
            }
        });
        vMinSlider.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                vMinSliderCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        vMaxSlider.setMaximum(255);
        vMaxSlider.setToolTipText("");
        vMaxSlider.setValue(255);
        vMaxSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                vMaxSliderStateChanged(evt);
            }
        });
        vMaxSlider.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                vMaxSliderCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        sMinSlider.setMaximum(255);
        sMinSlider.setValue(0);
        sMinSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sMinSliderStateChanged(evt);
            }
        });
        sMinSlider.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                sMinSliderCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        jLabel15.setText("H min");

        jLabel16.setText("H max");

        jLabel17.setText("S min");

        jLabel18.setText("S max");

        jLabel19.setText("V max");

        jLabel20.setText("V min");

        jLabel13.setText("Min Value");

        jLabel14.setText("Max Value");

        minValueTextField.setText("jTextField1");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vMaxSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(vMinSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sMaxSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sMinSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hMaxSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hMinSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(minValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(maxValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 19, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hMinSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hMaxSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sMinSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sMaxSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vMinSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vMaxSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(minValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        configurationPane.addTab("Sliders", jPanel5);

        javax.swing.GroupLayout originalPanelLayout = new javax.swing.GroupLayout(originalPanel);
        originalPanel.setLayout(originalPanelLayout);
        originalPanelLayout.setHorizontalGroup(
            originalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, originalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(originalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(originalImageLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                    .addGroup(originalPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(configurationPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        originalPanelLayout.setVerticalGroup(
            originalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(originalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(originalImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(configurationPane)
                .addContainerGap())
        );

        originalImageLabel.getAccessibleContext().setAccessibleName("originalImage");

        outputPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel12.setText("Solved Map");

        outputTextArea.setColumns(20);
        outputTextArea.setFont(new java.awt.Font("Courier New", 0, 6)); // NOI18N
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        mazeImageLabel.setToolTipText("");
        mazeImageLabel.setMaximumSize(new java.awt.Dimension(400, 300));
        mazeImageLabel.setMinimumSize(new java.awt.Dimension(400, 300));
        mazeImageLabel.setPreferredSize(new java.awt.Dimension(400, 300));
        jTabbedPane1.addTab("Maze Image", mazeImageLabel);

        outputImageLabel.setToolTipText("");
        outputImageLabel.setMaximumSize(new java.awt.Dimension(400, 300));
        outputImageLabel.setMinimumSize(new java.awt.Dimension(400, 300));
        outputImageLabel.setPreferredSize(new java.awt.Dimension(400, 300));
        jTabbedPane1.addTab("Robot Image", outputImageLabel);

        javax.swing.GroupLayout outputPanelLayout = new javax.swing.GroupLayout(outputPanel);
        outputPanel.setLayout(outputPanelLayout);
        outputPanelLayout.setHorizontalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(outputPanelLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        outputPanelLayout.setVerticalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Output");

        snapshotButton.setText("Take Snapshot");
        snapshotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapshotButtonActionPerformed(evt);
            }
        });

        startSolvingButton.setBackground(new java.awt.Color(255, 255, 204));
        startSolvingButton.setText("Start!");
        startSolvingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSolvingButtonActionPerformed(evt);
            }
        });

        updatePictureSettingsButton.setText("Update Settings");
        updatePictureSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePictureSettingsButtonActionPerformed(evt);
            }
        });

        initialSnapshotButton.setText("Initial Snapshot");
        initialSnapshotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initialSnapshotButtonActionPerformed(evt);
            }
        });

        solveAllButton.setBackground(new java.awt.Color(204, 255, 153));
        solveAllButton.setText("Solve All!");
        solveAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveAllButtonActionPerformed(evt);
            }
        });

        sendMovementButton.setText("Send Movement");
        sendMovementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMovementButtonActionPerformed(evt);
            }
        });

        useNewImage.setSelected(true);
        useNewImage.setText("Use new image");

        resetPosition.setText("Reset Pos");
        resetPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetPositionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(originalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(useNewImage)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(snapshotButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startSolvingButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updatePictureSettingsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(initialSnapshotButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(solveAllButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sendMovementButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(resetPosition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(useNewImage))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(initialSnapshotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(snapshotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(startSolvingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(solveAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(updatePictureSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(sendMovementButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(resetPosition)
                        .addGap(44, 44, 44))
                    .addComponent(outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(originalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void snapshotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapshotButtonActionPerformed
        if(MazeMat == null){
           JOptionPane.showMessageDialog(null, "First take an image from the maze without robots!");
        }
        else
        {
            if(useNewImage.isSelected()){
                takePicture();
            }
            else {}
            processPicture();
        }
    }//GEN-LAST:event_snapshotButtonActionPerformed

    private void startSolvingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSolvingButtonActionPerformed
        // TODO add your handling code here:
        if(MazeMat == null){
           JOptionPane.showMessageDialog(null, "First take an image from the maze without robots!");
        }
        else
        {
            processSolutionSteps(4);
        }
    }//GEN-LAST:event_startSolvingButtonActionPerformed

    private void hsvMinBlueTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsvMinBlueTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hsvMinBlueTextBoxActionPerformed

    private void hsvMaxBlueTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsvMaxBlueTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hsvMaxBlueTextBoxActionPerformed

    private void startXYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startXYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startXYActionPerformed

    private void pictureSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pictureSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pictureSizeActionPerformed

    private void hsvMinRedTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsvMinRedTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hsvMinRedTextBoxActionPerformed

    private void hsvMaxRedTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsvMaxRedTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hsvMaxRedTextBoxActionPerformed

    private void hsvMaxGreenTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsvMaxGreenTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hsvMaxGreenTextBoxActionPerformed

    private void hsvMinGreenTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsvMinGreenTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hsvMinGreenTextBoxActionPerformed

    private void updatePictureSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePictureSettingsButtonActionPerformed
        // TODO add your handling code here:
        if(MazeMat == null){
           JOptionPane.showMessageDialog(null, "First take an image from the maze without robots!");
        }
        else
        {
            repaintOriginalPicture();
        }
    }//GEN-LAST:event_updatePictureSettingsButtonActionPerformed

    private void initialSnapshotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialSnapshotButtonActionPerformed
        // TODO add your handling code here:
        if(useNewImage.isSelected()){
            takePicture();
        }
        else {}
        processMaze();
    }//GEN-LAST:event_initialSnapshotButtonActionPerformed

    private void solveAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveAllButtonActionPerformed
        // TODO add your handling code here:
        if(MazeMat == null){
           JOptionPane.showMessageDialog(null, "First take an image from the maze without robots!");
        }
        else
        {
            processSolutionBySteps();
        }
    }//GEN-LAST:event_solveAllButtonActionPerformed

    private void sendMovementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMovementButtonActionPerformed
        try {
            BotCalls bc = new BotCalls(BOT_ADDRESS,BOT_PORT);
            Thread.sleep(500);
            
            bc.SendMovement(BOT_ACTIONS.forward);
            Thread.sleep(500);
            
            bc.CloseClient();
        } catch (InterruptedException ex) {
            Logger.getLogger(BotController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sendMovementButtonActionPerformed

    private void hMinSliderCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_hMinSliderCaretPositionChanged
        // TODO add your handling code here:
        processPictureWithSliders();
    }//GEN-LAST:event_hMinSliderCaretPositionChanged

    private void vMaxSliderCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_vMaxSliderCaretPositionChanged
        // TODO add your handling code here:
        processPictureWithSliders();
    }//GEN-LAST:event_vMaxSliderCaretPositionChanged

    private void vMinSliderCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_vMinSliderCaretPositionChanged
        // TODO add your handling code here:
        processPictureWithSliders();
    }//GEN-LAST:event_vMinSliderCaretPositionChanged

    private void sMaxSliderCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_sMaxSliderCaretPositionChanged
        // TODO add your handling code here:
        processPictureWithSliders();
    }//GEN-LAST:event_sMaxSliderCaretPositionChanged

    private void sMinSliderCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_sMinSliderCaretPositionChanged
        // TODO add your handling code here
        processPictureWithSliders();
    }//GEN-LAST:event_sMinSliderCaretPositionChanged

    private void hMaxSliderCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_hMaxSliderCaretPositionChanged
        // TODO add your handling code here:
        processPictureWithSliders();
    }//GEN-LAST:event_hMaxSliderCaretPositionChanged

    private void hMinSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hMinSliderStateChanged
        // TODO add your handling code here:
        processPictureWithSliders();
    }//GEN-LAST:event_hMinSliderStateChanged

    private void hMaxSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hMaxSliderStateChanged
        // TODO add your handling code here:
        processPictureWithSliders();
    }//GEN-LAST:event_hMaxSliderStateChanged

    private void sMinSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sMinSliderStateChanged
        // TODO add your handling code here:
        processPictureWithSliders();
    }//GEN-LAST:event_sMinSliderStateChanged

    private void sMaxSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sMaxSliderStateChanged
        // TODO add your handling code here:
        processPictureWithSliders();
    }//GEN-LAST:event_sMaxSliderStateChanged

    private void vMinSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_vMinSliderStateChanged
        // TODO add your handling code here:
        processPictureWithSliders();
    }//GEN-LAST:event_vMinSliderStateChanged

    private void vMaxSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_vMaxSliderStateChanged
        // TODO add your handling code here:
        processPictureWithSliders();
    }//GEN-LAST:event_vMaxSliderStateChanged

    private void resetPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetPositionActionPerformed
        // TODO add your handling code here:
        lastDirection= BOT_DIRECTION.up;
        System.out.println("Position to UP");
    }//GEN-LAST:event_resetPositionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BotController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(),"Application Error",JOptionPane.ERROR_MESSAGE);
        }
        //</editor-fold>
        
        //</editor-fold>

        //Load OpenCV Library
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BotController().setVisible(true);
        });
    }
    
    private void takePicture(){
        try {
            capturedImage = ImageUtils.getImage();
            ImageIO.write((BufferedImage)capturedImage, "jpg", new File(imgPath));
            repaintOriginalPicture();
        } catch (IOException ex) {
            Logger.getLogger(BotController.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(),"Application Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void repaintOriginalPicture() {
        originalImage = ImageUtils.cropImage(
                        Imgcodecs.imread(imgPath), 
                        GetXValue(startXY.getText()), 
                        GetXValue(pictureSize.getText()), 
                        GetYValue(startXY.getText()), 
                        GetYValue(pictureSize.getText())
        );

        ImageIcon originalImageIcon = new ImageIcon(
                        ImageUtils.getScaledImage(originalImage)
        );

        originalImageLabel.setIcon(originalImageIcon);
        originalImageLabel.repaint();
    }
    
    private void processSolutionBySteps(){
        int fullIterations = 0;
        while(fullIterations<50){
            processSolutionSteps(4);
            isBotQueueEmpty();
            System.out.println("Iteration: " + fullIterations + " completed");
            fullIterations++;
            
        }
    }
    
    private boolean isBotQueueEmpty(){
        boolean isEmpty=false;
        int i = 0;
            try {
                while(!isEmpty && (i<4)){
                    BotCalls bc = new BotCalls(BOT_ADDRESS,BOT_PORT);
                    Thread.sleep(400);
                    isEmpty = bc.checkQueue();
                    bc.CloseClient();
                    if(isEmpty){
                        break;
                    }
                    Thread.sleep(1200);
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(BotController.class.getName()).log(Level.SEVERE, null, ex);
            }
        i++;
        return isEmpty;
    }
    
    private BOT_DIRECTION processSolutionSteps(int maxSteps){
        try {
            takePicture();
            List<BOT_ACTIONS> cartesian = processPicture();
            Thread.sleep(100);
            
            MazeMovementSolver mms = new MazeMovementSolver();
            List<BotMovement> movements = mms.getAllMovements(cartesian, lastDirection);
            
            int i = 0;
            
            System.out.println("Solution count: " + movements.size());
            
            while(i<maxSteps){
                for (BOT_ACTIONS action : movements.get(i).getActions()) {
                    BotCalls bc = new BotCalls(BOT_ADDRESS,BOT_PORT);
                    Thread.sleep(400);
                    bc.SendMovement(action);
                    Thread.sleep(200);
                    bc.CloseClient();
                }
                lastDirection = movements.get(i).getDirection();
                i++;
            }
            System.out.println("last direction: " + lastDirection);
            return movements.get(i).getDirection();
            
        } catch (InterruptedException ex) {
            Logger.getLogger(BotController.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(),"Application Error",JOptionPane.ERROR_MESSAGE);
            return lastDirection;
        }
    }
    
    private void processMaze(){
        MazeMat = ImageUtils.getFilteredImage(
            GetHSVVScalar(hsvMinBlueTextBox.getText()), 
            GetHSVVScalar(hsvMaxBlueTextBox.getText()), 
            0, finalSize, originalImage);
        
        
        ImageIcon mazeImageIcon = new ImageIcon(
                ImageUtils.getScaledImage(MazeMat)
            );

        mazeImageLabel.setIcon(mazeImageIcon);
        mazeImageLabel.repaint();
    }
    
    private void processPictureWithSliders(){
        String minValue = hMinSlider.getValue() + "," + sMinSlider.getValue() + "," + vMinSlider.getValue();
        String maxValue = hMaxSlider.getValue() + "," + sMaxSlider.getValue() + "," + vMaxSlider.getValue();
        MazeMat = ImageUtils.getFilteredImage(
            GetHSVVScalar(minValue), 
            GetHSVVScalar(maxValue), 
            0, finalSize, originalImage);
        
        minValueTextField.setText(minValue);
        maxValueTextField.setText(maxValue);
        
        ImageIcon imageIcon = new ImageIcon(
                ImageUtils.getScaledImage(MazeMat)
            );

        outputImageLabel.setIcon(imageIcon);
        outputImageLabel.repaint();
    }
    
    
    private List<BOT_ACTIONS> processPicture() {
        if(MazeMat == null){
           JOptionPane.showMessageDialog(null, "First take an image from the maze without robots!");
           return null;
        }
        else
        {
            Mat BlueImage = MazeMat.clone();
        
            Mat GreenImage = ImageUtils.getFilteredImage(
                GetHSVVScalar(hsvMinGreenTextBox.getText()), 
                GetHSVVScalar(hsvMaxGreenTextBox.getText()), 
                0, finalSize, originalImage);
            Mat RedImage = ImageUtils.getFilteredImage(
                GetHSVVScalar(hsvMinRedTextBox.getText()), 
                GetHSVVScalar(hsvMaxRedTextBox.getText()), 
                0, finalSize, originalImage);

            Size startPoint = ImageUtils.getFirstPixel(GreenImage, (int)finalSize.width, (int)finalSize.height, 255);
            Size endPoint = ImageUtils.getFirstPixel(RedImage, (int)finalSize.width, (int)finalSize.height, 255);

            BlueImage.put((int)startPoint.width, (int)startPoint.height, greenData);
            BlueImage.put((int)endPoint.width, (int)endPoint.height, redData);

            ImageIcon maze = new ImageIcon(
                ImageUtils.getScaledImage(BlueImage)
            );

            String dump = GetStringMap(BlueImage);
            Maze mazeSolution = new Maze(dump);

            outputTextArea.append("\r\n");

            List<BOT_ACTIONS> cartesianSolution = bfs(mazeSolution);
            outputTextArea.append(cartesianSolution.toString());
            outputTextArea.append("\r\n");
            
            outputTextArea.append(cartesianSolution.toString());

            outputImageLabel.setIcon(maze);
            outputImageLabel.repaint();
            
            return cartesianSolution;
        }
    }
    
    
    
    private List<BOT_ACTIONS> bfs(Maze maze) {
        BFSMazeSolver bfs = new BFSMazeSolver();
        List<Coordinate> path = bfs.solve(maze);
        List<BOT_ACTIONS> _solution = maze.printPath(path);
        maze.reset();
        return _solution;
    }
    
    private String GetStringMap(Mat mat){
        try {
            outputTextArea.setText(null);
            String _dump = getStandardDump(mat,finalSize);
            outputTextArea.append(_dump);
            return _dump;
        } catch (Exception ex) {
            Logger.getLogger(BotController.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(),"Application Error",JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }
    
    private int GetXValue(String textBoxValue){
        return Integer.parseInt(textBoxValue.split(",")[0]);
    }
    
    private int GetYValue(String textBoxValue){
        return Integer.parseInt(textBoxValue.split(",")[1]);
    }
    
    private Scalar GetHSVVScalar(String textValue){
        String [] splittedValue = textValue.split(",");
        return new Scalar(Integer.parseInt(splittedValue[0]),Integer.parseInt(splittedValue[1]),Integer.parseInt(splittedValue[2]));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane configurationPane;
    private javax.swing.JSlider hMaxSlider;
    private javax.swing.JSlider hMinSlider;
    private javax.swing.JTextField hsvMaxBlueTextBox;
    private javax.swing.JTextField hsvMaxGreenTextBox;
    private javax.swing.JTextField hsvMaxRedTextBox;
    private javax.swing.JTextField hsvMinBlueTextBox;
    private javax.swing.JTextField hsvMinGreenTextBox;
    private javax.swing.JTextField hsvMinRedTextBox;
    private javax.swing.JButton initialSnapshotButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField maxValueTextField;
    private javax.swing.JLabel mazeImageLabel;
    private javax.swing.JTextField minValueTextField;
    private javax.swing.JLabel originalImageLabel;
    private javax.swing.JPanel originalPanel;
    private javax.swing.JLabel outputImageLabel;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JTextField pictureSize;
    private javax.swing.JButton resetPosition;
    private javax.swing.JSlider sMaxSlider;
    private javax.swing.JSlider sMinSlider;
    private javax.swing.JButton sendMovementButton;
    private javax.swing.JButton snapshotButton;
    private javax.swing.JButton solveAllButton;
    private javax.swing.JButton startSolvingButton;
    private javax.swing.JTextField startXY;
    private javax.swing.JButton updatePictureSettingsButton;
    private javax.swing.JCheckBox useNewImage;
    private javax.swing.JSlider vMaxSlider;
    private javax.swing.JSlider vMinSlider;
    // End of variables declaration//GEN-END:variables
}
